(load "2.65-list-tree.scm")
(load "2.65-tree-list2.scm")
(define (union-tree tree1 tree2)
  (define (union-set set1 set2)
    (cond ((null? set1) set2)
	  ((null? set2) set1)
	  ((= (car set1) (car set2)) (cons (car set1) (union-set (cdr set1) (cdr set2))))
	  ((< (car set1) (car set2)) (cons (car set1) (union-set (cdr set1) set2)))
	  ((> (car set1) (car set2)) (cons (car set2) (union-set set1 (cdr set2))))))
  (let ((set1 (tree->list-2 tree1))
	(set2 (tree->list-2 tree2)))
    (list->tree (union-set set1 set2))))
