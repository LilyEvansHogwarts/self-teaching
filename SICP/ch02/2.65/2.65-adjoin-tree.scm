(load "2.65-list-tree.scm")
(load "2.65-tree-list2.scm")
(define (adjoin-tree x tree)
  (define (adjoin-set x set)
    (cond ((null? set) (list x))
	  ((< x (car set)) (cons x set))
	  ((= x (car set)) set)
	  ((> x (car set)) (cons (car set) (adjoin-set x (cdr set))))))
  (let ((set (tree->list-2 tree)))
    (list->tree (adjoin-set x set))))
