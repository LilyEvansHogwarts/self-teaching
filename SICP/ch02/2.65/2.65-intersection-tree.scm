(load "2.65-list-tree.scm")
(load "2.65-tree-list2.scm")
(define (intersection-tree tree1 tree2)
  (define (intersection-set set1 set2)
    (if (or (null? set1) (null? set2))
      ()
      (let ((x1 (car set1))
	    (x2 (car set2)))
       (cond ((= x1 x2) (cons x1 (intersection-set (cdr set1) (cdr set2))))
  	     ((< x1 x2) (intersection-set (cdr set1) set2))
	     ((< x2 x1) (intersection-set set1 (cdr set2)))))))
  (let ((set1 (tree->list-2 tree1))
	(set2 (tree->list-2 tree2)))
    (list->tree (intersection-set set1 set2))))
