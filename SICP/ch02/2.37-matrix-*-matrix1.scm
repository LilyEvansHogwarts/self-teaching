(define (matrix-*-matrix m n)
   (define (car-n x)
      (map car x))
   (define (cdr-n x)
      (map cdr x))
   (define (dot-product x y)
      (accumulate + 0 (map * x y)))
   (define (accumulate op initial items)
      (cond ((null? items) initial)
            (else (accumulate op (op (car items) initial) (cdr items)))))
   (define (matrix-*-vector m v)
      (cond ((null? m) ())
            (else (cons (dot-product (car m) v) (metrix-*-vector (cdr m) v)))))
   (define (fringe x)
      (cond ((null? x) ())
            ((not (pair? x)) (list x))
            (else (append (fringe (car x)) (fringe (cdr x))))))
   (define (vector-*-matrix v m)
      (cond ((null? (fringe m)) ())
            (else (cons (dot-product v (car-n m)) (vector-*-matrix v (cdr-n m))))))
   (cond ((null? m) ())
         (else (cons (vector-*-matrix (car m) n) (matrix-*-matrix (cdr m) n)))))
