(define (matrix-*-matrix m n)
   (define (fringe x)
      (cond ((null? x) ())
            ((not (pair? x)) (list x))
            (else (append (fringe (car x)) (fringe (cdr x))))))
   (define (car-n x)
      (map car x))
   (define (cdr-n x)
      (map cdr x))
   (define (dot-product v1 v2)
      (accumulate + 0 (map * v1 v2)))
   (define (accumulate op initial items)
      (cond ((null? items) initial)
            (else (accumulate op (op (car items) initial) (cdr items)))))
   (define (matrix-*-vector m v)
      (map (lambda (col) (dot-product col v)) m))
   (define (vector-*-matrix v m)
      (map (lambda (col) (dot-product v col)) (transpose m)))
   (define (transpose m)
      (cond ((null? (fringe m)) ())
            (else (cons (car-n m) (transpose (cdr-n m))))))
   (map (lambda (col) (vector-*-matrix col n)) m))
