(define (make-table same-key?)
  (let ((local-table (list '*table*)))
    (define (lookup key1 key2)
      (let ((subtable (assoc key1 (cdr local-table))))
	(if subtable
	  (let ((record (assoc key2 (cdr subtable))))
	    (if record
	      (cdr record)
	      false))
	  false)))
    (define (assoc key table)
      (cond ((null? table) false)
	    ((smae-key? key (caar table)) (car table))
	    (else (assoc key (cdr table)))))
    (define (insert! key1 key2 value)
      (let ((subtable (assoc key1 (cdr local-table))))
	(if subtable
	  (let ((record (assoc key2 (cdr subtable))))
	    (if record
	      (set-cdr! record value)
	      (set-cdr! subtable (cons (cons key2 value) (cdr subtable)))))
	  (set-cdr! local-table (cons (list key1 (cons key2 value)) (cdr local-table))))))
    (define (print-table)
      (display local-table)
      (newline))
    (define (dispatch m)
      (cond ((eq? m 'lookup-proc) lookup)
	    ((eq? m 'insert-proc) insert!)
	    ((eq? m 'print-table) (print-table))
	    (else (error "Unknown operation -- TABLE" m))))
    dispatch))
