(define (make-table)
  (let ((local-table (list '*table*)))
    (define (assoc key records)
      (cond ((null? records) false)
	    ((eq? key (caar records)) (car records))
	    (else (assoc key (cdr records)))))
    (define (lookup key1 key2)
      (let ((subtable (assoc key1 (cdr local-table))))
	(if subtable
	  (let ((record (assoc key2 (cdr subtable))))
	    (if record
	      (cdr record)
	      false))
	  false)))
    (define (insert! key1 key2 value)
      (let ((subtable (assoc key1 (cdr local-table))))
	(if subtable
	  (let ((record (assoc key2 (cdr subtable))))
	    (if record
	      (set-cdr! record value)
	      (set-cdr! subtable (cons (cons key2 value) (cdr subtable)))))
	  (set-cdr! local-table (cons (list key1 (cons key2 value)) (cdr local-table))))))
    (define (dispatch m)
      (cond ((eq? m 'insert!) insert!)
	    ((eq? m 'lookup) lookup)
	    (else (error "no such operation -- MAKE-TABLE" m))))
    dispatch))
