(define (ripple-carry-adder A B S C)
  (define (iter A B C value-of-c)
    (if (and (null? A) (null? B) (null? S))
      'done
      (let ((Ak (car A))
	   (Bk (car B))
	   (Sk (car S))
	   (remain-A (cdr A))
	   (remain-B (cdr B))
	   (remain-S (cdr S))
	   (Ck (make-wire)))
	(set-signal! Ck value-of-c)
	(full-adder Ak Bk Ck Sk C)
	(iter remain-A remain-B remain-S (get-signal C)))))
  (iter A B C (get-signal C)))
