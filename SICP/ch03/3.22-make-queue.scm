(define (make-queue)
  (let ((front-ptr '())
	(rear-ptr '()))
    (define (insert-queue! item)
      (let ((new-pair (cons item '())))
	(cond ((empty-queue?) 
	       (set! front-ptr new-pair)
	       (set! rear-ptr new-pair)
	       (print-queue))
	      (else 
		(set-cdr! rear-ptr new-pair)
		(set! rear-ptr new-pair)
		(print-queue)))))
    (define (delete-queue!)
      (if (empty-queue?)
	(error "empty queue" front-ptr)
        (begin (set! front-ptr (cdr front-ptr))
	       (print-queue))))
    (define (print-queue)
      front-ptr)
    (define (empty-queue?)
      (null? front-ptr))
    (define (dispatch m)
      (cond ((eq? m 'insert-queue!) insert-queue!)
	    ((eq? m 'delete-queue!) (delete-queue!))
	    ((eq? m 'empty-queue?) (empty-queue?))
	    ((eq? m 'print-queue) (print-queue))
	    (else (error "No such operation." m))))
    dispatch))

