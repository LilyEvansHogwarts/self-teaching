(define (damped-nth-root n damp-times)  
   (define (average-damp f)
      (lambda (x) (/ (+ x (f x)) 2)))
   (define (fixed-point f first-guess)
      (try f first-guess 1))
   (define (try f guess step)
      (report guess step)
      (let ((next (f guess)))
         (if (close-enough? guess next)
             (begin (report next (+ step 1))
                    next)
             (try f next (+ step 1)))))
   (define (close-enough? v1 v2)
      (< (abs (- v1 v2)) 0.00001))
   (define (report guess step)
      (display "step: ")
      (display step)
      (display "\t")
      (display "guess: ")
      (display guess)
      (newline))
   (define (repeated f n)
      (lambda (x) (if (= n 0)
                      x
                      ((repeated f (- n 1)) (f x)))))
   (define (exp_ base n)
      ((repeated (lambda (x) (* base x)) n) 1.0))
   (define (average-damp-n-times f n)
      ((repeated average-damp n) f))
   (lambda (x) (fixed-point (average-damp-n-times (lambda (y) (/ x (exp_ y (- n 1)))) damp-times) 1.0)))
