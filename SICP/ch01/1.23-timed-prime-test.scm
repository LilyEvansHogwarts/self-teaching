(define (timed-prime-test n)     
   (define (start-prime-time n start-time)
      (continue-primes n 3)   
      (report-prime (- (real-time-clock) start-time)))
   (define (report-prime elapsed-time)
      (display " *** ")
      (display elapsed-time))
   (define (continue-primes n count)
      (cond ((= count 0) (display "are primes."))
            ((prime? n) (display n) (newline) (continue-primes (next-odd n) (- count 1)))
            (else (continue-primes (next-odd n) count))))
   (define (prime? n)
      (= (smallest-divisor n) n))
   (define (smallest-divisor n)
      (find-divisor n 2))
   (define (find-divisor n test-divisor)
      (cond ((> (square test-divisor) n) n)
            ((divides? n test-divisor) test-divisor)
            (else (find-divisor n (next-odd test-divisor)))))
   (define (divides? n test-divisor)
      (= (remainder n test-divisor) 0))
   (define (next-odd n)
      (if (odd? n)
          (+ n 2)
          (+ n 1)))
   (display "The smallest three prime numbers are :")
   (display n)
   (newline)
   (start-prime-time n (real-time-clock)))
