(define (fixed-point-of-transform g first-guess)
    (define (deriv f x)
       (/ (- (f (+ x dx)) (f x)) dx))
    (define dx 0.0001)
    (define (transform g)
       (lambda (x) (- x (/ (g x) (deriv g x)))))
    (define (fixed-point f guess)
       (try f guess 1))
    (define (try f guess step)
       (report guess step)
       (let ((next (f guess)))
          (if (close-enough? guess next)
              (begin (report next (+ step 1))
                     next)
              (try f next (+ step 1)))))
   (define (close-enough? v1 v2) (< (abs (- v1 v2)) 0.00001))
   (define (report guess step)
      (display "step: ")
      (display step)
      (display "\t\t")
      (display "guess: ")
      (display guess)
      (newline))
   (fixed-point (transform g) first-guess))
